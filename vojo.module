<?php

// Optimization: maintain a single-query-duration cache of published story counts per group
$_vojo_group_published_story_counts = array();

/**
 * Load up helpers
 */
function vojo_init(){
    // load custom blocks
    module_load_include('inc', 'vojo', 'includes/vojo.blocks');  
    // load costom voip-drupal scripts
    module_load_include('inc', 'vojo', 'includes/vojo.script');
    if (arg(0) == 'blogs') {
      drupal_set_title('somebodys blog!');
    }
}

/**
 * Implementation of hook_menu_alter.
 */
function vojo_menu_alter(&$items) {
  // Unset default blog module's blog path (we want to use views instead). 
  unset($items['blog/%user_uid_optional']);
  $items['blog/%user_uid_optional']['page callback'] = FALSE;
}

/**
 * Implementation of hook_link_alter.
 */
function vojo_link_alter(&$links, $node) {
  // Change user's blog link to so it points to custom view (instead of core blog module's path)
  if ($links['blog_usernames_blog']) {
    $links['blog_usernames_blog']['href'] = 'blogs/'. $node->name;
  }
}
/**
 * Implementation of hook_profile_alter. 
 */
function vojo_profile_alter(&$account) {
  // Override path to user's blog, /blogs points to a view instead. 
  $account->content['summary']['blog']['#value'] = l(t('View recent blog entries'), 'blogs/'. $account->name, array('attributes' => array('title' => 'Read latest blog entries.'))); 
}

/**
 * Helper function to find out how many stories are published within a group.  This is written
 * to be called by themes and custom panels/blocks if they need to embed the count somewhere.  This
 * manages a qingle-query-duration cache for you.
 */
function vojo_group_published_story_count($group_id) {
    global $_vojo_group_published_story_counts;
    $story_count = 0;
    if(array_key_exists($group_id,$_vojo_group_published_story_counts)){
        $story_count = $_vojo_group_published_story_counts[$group_id];
    } else {
        $results = db_query("SELECT count(n.nid) as story_count 
                         FROM {og_ancestry} as oga, {node} as n
                         WHERE oga.nid=n.nid AND oga.group_nid=$group_id AND n.status=1", $group_id);
        while ($object = db_fetch_object($results)) {
            $story_count = $object->story_count;
        }
        $_vojo_group_published_story_counts[$group_id] = $story_count;
    }
    return $story_count;
}

/**
 * Use this to get the path to an image inside the "img" dir of this module
 */
function _vojo_image_path($imgfile){
    return theme_image(drupal_get_path('module','vojo')."/img/".$imgfile);
}

/**
 * Implementation of hook_voipscript_load_script().
 */
function vojo_voipscript_load_script($script_name, $params = NULL) {
    if ($script_name == 'vojo_group') {
        module_load_include('inc', 'vojo', 'vojo.script');
        $node = node_load($params['nid']);
        return _vojo_group_script($node);
    }
    elseif ($script_name == 'vojo_record_blog') {
        module_load_include('inc', 'vojo', 'vojo.script');
        $node = node_load($params['nid']);
        return _vojo_record_blog_script($node);
    }
    elseif ($script_name == 'vojo_save_blog') {
        module_load_include('inc', 'vojo', 'vojo.script');
        return _vojo_save_blog_script($params['nid'], $params['fid']);
    }
    elseif ($script_name == 'vojo_login') {
        module_load_include('inc', 'vojo', 'vojo.script');
        return _vojo_login_script($params['number']);
    }
    elseif ($script_name == 'vojo_welcome') {
        module_load_include('inc', 'vojo', 'vojo.script');
        return _vojo_welcome_script($params['number']);
    }
    elseif ($script_name == 'vojo_redirect_to_group') {
        module_load_include('inc', 'vojo', 'vojo.script');
        return _vojo_redirect_to_group_script($params['number']);
    }
}

/**
 * Implementation of hook_voipscript_get_script_names().
 */
function vojo_voipscript_get_script_names() {
  return array(
    'vojo_group',
    'vojo_record_blog',
    'vojo_save_blog',
    'vojo_login',
    'vojo_welcome',
    'vojo_redirect_to_group',
  );
}

/**
 * Implementation of hook_ctools_plugin_dierctory() to let the system know
 * we implement task and task_handler plugins.
 */
function vojo_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/** --------- OPENLAYERS ------------------------------------------------------ **/

/**
 * Define custom styles for rendering the markers on a map.
 * Implements hook_openlayers_styles().
 *   http://drupal.org/node/620602
 */
function vojo_openlayers_styles() {
  $styles = array();
  
  $style = new stdClass();
  $style->api_version = 1;
  $style->name = 'vojo_default';
  $style->title = t('Vojo Default style');
  $style->description = t('Basic default style for the vojo website.');
  $style->data = array(
    'pointRadius' => 6,
    'fillColor' => '#ffffff',
    'strokeColor' => '#890053',
    'strokeWidth' => 4,
    'fillOpacity' => 0.9,
    'strokeOpacity' => 1
  );
  $styles[ $style->name ] = $style;
  
  $style = new stdClass();
  $style->api_version = 1;
  $style->name = 'vojo_selected';
  $style->title = t('Vojo Selected style');
  $style->description = t('Basic selected style for the vojo website.');
  $style->data = array(
    'pointRadius' => 10,
    'fillColor' => '#ffffff',
    'strokeColor' => '#890053',
    'strokeWidth' => 8,
    'fillOpacity' => 1.0,
    'strokeOpacity' => 1.0
  );
  $styles[ $style->name ] = $style;
  
  $style = new stdClass();
  $style->api_version = 1;
  $style->name = 'vojo_temporary';
  $style->title = t('Vojo Temporary style');
  $style->description = t('Basic temporary style for the vojo website.');
  $style->data = array(
    'pointRadius' => 8,
    'fillColor' => '#ffffff',
    'strokeColor' => '#890053',
    'strokeWidth' => 6,
    'fillOpacity' => 0.5,
    'strokeOpacity' => 0.5
  );
  $styles[ $style->name ] = $style;
  
  return $styles;
}

/**
 * Tell ctools that we have custom marker styles.
 * Implements hook_ctools_plugin_api().
 *   http://drupal.org/node/620602
 */
function vojo_ctools_plugin_api($module, $api) {
  if ($module == "openlayers") {
    switch ($api) {
      case 'openlayers_styles':
        return array('version' => 1);

    }
  }
}

/**
 * Get the url to an audio file stored with this model.
 */
function _vojo_get_audio_url($filename){
  global $base_url;
  return $base_url."/".drupal_get_path('module','vojo')."/audio/".$filename;
}

/**
 * Increase max length of location field on blog for https://dev.vozmob.net/issues/1072
 */
function vojo_form_blog_node_form_alter($form, &$form_state) {
  // Hide location field to prevent users from editing it directly. 
  $form['field_location_string']['#theme'] = FALSE;
  
  $form['#after_build'][] = 'vojo_form_blog_node_form_after_build';
  
  // Well need to set value of $form['field_location_string'] in a submit handler. 
  $form['#submit'][] = 'vojo_form_blog_node_form_submit';
}
function vojo_form_blog_node_form_after_build($form, &$form_state) {
  $form['locations'][0]['name']['#maxlength'] = "128";
  return $form;
}
function vojo_form_blog_node_form_submit($form, &$form_state) {
  // Grab user entered value from openlayers_geocoder field and save to $form['field_location_string']
  $form_state['values']['field_location_string'][0]['value'] = $form['field_map']['openlayers_geocoder_query']['#value'];
}
/**
 * Find the node matching the specified phone number, checking in all voipnumber fields.
 * Returns false if no match is found.  If multiple matches are found, this return the first
 * one it finds.
 */
function _vojo_voipnumber_api_nid_from_number($number) {
  // look in all the voipnumber fields
  foreach( content_fields() as $field){
    if($field['type']=='voipnumber'){
      // determine what table to search in 
      $table_name= "content_type_".$field['type_name'];
      $col_name = $field['field_name']."_phone";
      // search for any matches to the phone number
      $sql = 'SELECT nid FROM {'.$table_name.'} WHERE '.$col_name.' = "%s"';
      $result = db_query($sql, $number);
      while ($noderow = db_fetch_object($result)) {
        return $noderow->nid;
      }
    }
  }
  return false;
}


/**
 * Find the extension number for a specific node id.
 */
function _vojo_voipextension_api_extension_for_node($nid) {
  return db_result(db_query('SELECT eid FROM {voipextension} WHERE module_id = %d', $nid));
}
