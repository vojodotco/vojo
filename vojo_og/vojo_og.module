<?php

/**
 * 
 */
function vojo_og_init() {
    _set_node_theme_from_group();
    module_load_include('inc', 'vojo_og', 'includes/vojo_og.blocks');  
}


/**
 * If looking at a blog post that belongs to only one group, set the theme based on that group's
 * custom theme.  This needs to query the raw database, because calls to functions like 
 * menu_get_item and node_load trigger a call to init_theme, which sets the theme before we get 
 * a chance to!
 */
function _set_node_theme_from_group(){
    if (arg(0) == 'node' && is_numeric(arg(1))) {
        $nid = arg(1);
        $results = db_query("SELECT og.og_theme as group_theme 
                             FROM {og_ancestry} as oga, {og} as og 
                             WHERE oga.nid = %d AND oga.group_nid=og.nid", $nid);
        $group_theme = null;
        $group_count = 0;
        while ($object = db_fetch_object($results)) {
            $group_count++;
            $group_theme = $object->group_theme;
        }
        if($group_theme && $group_count==1){
            _set_custom_theme($group_theme);
        }
    }
}

/**
 * Use the path info to figure out what group we're looking at
 * WTF: Why doesn't og_get_group_context work????
 */
function vojo_og_get_group_nid(){
    $group_nid = null;
    $nid = null;
    if (arg(0) == 'node' && is_numeric(arg(1))) {
        $nid = arg(1);
    } elseif ( arg(0)=="og" && arg(1)=="users" && is_numeric(arg(2)) ){
        $nid = arg(2);
    }
    if ($nid) {
        $results = db_query("SELECT n.type as node_type, oga.group_nid as group_nid
                             FROM {node} as n LEFT JOIN {og_ancestry} as oga ON oga.nid = n.nid
                             WHERE n.nid = %d", $nid);
        $group_nid = null;
        $node_type = null;
        $group_count = 0;
        while ($object = db_fetch_object($results)) {
            $group_count++;
            $node_type = $object->node_type;
            $found_group_nid = $object->group_nid;
        }
        if($group_count==1 && $node_type=="group"){
            // we're looking at a group node, return it's ID
            $group_nid = $nid;
        } else if ($group_count==1){
            // it's a node in this group (and no others)
            $group_nid = $found_group_nid;
        } else {
            // ERROR: nodes in vojo can't be part of more than one group!
        }
    }
    return $group_nid;
}


/**
 * Public method to get the url to the screenshot of a theme
 */
function vojo_og_theme_screenshot_url($group_nid){
    global $base_url;
    // figure out what theme the group is using
    $theme_name = null;
    $results = db_query("SELECT og.og_theme as group_theme 
                         FROM {og} as og 
                         WHERE og.nid=%d", $group_nid);
    $group_theme = null;
    $group_count = 0;
    while ($object = db_fetch_object($results)) {
        $group_count++;
        $group_theme = $object->group_theme;
    }
    if($group_theme && $group_count==1){
        $theme_name = $group_theme; 
    } else {
        $group_theme = "vojo_generic";
    }
    // figure out the path to the theme screenshot
    print $base_url."/".drupal_get_path('theme',$group_theme)."/screenshot.png";
    
}

/**
 * Be attentive about when you call this - it could have no effect at all if theme_init() has
 * already been called.
 */
function _set_custom_theme($theme_name){
    global $custom_theme;
    if(!empty($theme_name)){
        $custom_theme = $theme_name;
    }
}

/**
 * Implementation of hook_form_alter().
 * HACK: this is a uber-hack to allow me to force a new blog post to be in a certain node. The list
 * of groups isn't showing up for anonymous users, so I'm forcing it to be added to the form here.
 */
function vojo_form_alter(&$form, &$form_state, $form_id) {
  // Add audience selection to node forms
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $node = $form['#node'];
    if (og_is_group_post_type($node->type)) {

    /***
    Uncomment this if we also need to display group audience checkboxes to anonymouse users. 

      //$form_state['og_gids'] = _vojo_get_public_groups(); // force add all the public groups
      $public_group_list = _vojo_get_public_groups(); // nid=>title
      // og_form_add_og_audience($form, $form_state);
      
      $og_form_hack = array(
        '#group' => 'additional_settings',
        '#weight' => 0,
        'visible' => array(
          'og_groups' => array(
            '#type'=>'checkboxes',
            '#title'=>'Audience',
            '#attributes'=>array(
              'class'=>'og-audience',
            ),
            '#options'=> $public_group_list,
            '#required'=>0,
            '#description'=>'Show this post in these groups.',
            '#multiple'=>0 
          )
        )
      );
      $form['og_nodeapi'] = $og_form_hack;
      
      ***/
      
      // Set the value for audience if the gid is present in the url. This works for anonymouse users too.
      if (!empty($_GET['gids']) && empty($form_state['og_gids'])) {
        $form['og_nodeapi']['invisible']['og_groups'] = array('#type' => 'hidden', '#value' => array($_GET['gids'][0] => $_GET['gids'][0]));
      }
    } 
  }
}
function vojo_form_group_node_form_alter($form, &$form_state) {
  $form['body_field']['body']['#description'] = t("Write a short description of your group for your about page.");
  // Add after build function. 
  $form['#after_build'][] = 'vojo_form_group_node_form_after_build';
  // Add validate function.
  $form['#validate'][] = 'vojo_form_group_node_form_alter_validate';
}
function vojo_form_group_node_form_alter_validate($form, &$form_state) {
  if (stristr($form_state['values']['field_yeta'][0]['value'], '@vojo.co') == FALSE) {
    form_set_error('email', t('E-mail address: You must use an email that ends with @vojo.co.'));
  }
}
function vojo_form_group_node_form_after_build($form, &$form_state) {
  // Do not display og_user_roles select box if it has no selectable options.
  if (count($form['og_user_roles_default_role']['#options']) == 1) {
    unset($form['og_user_roles_default_role']);
  }
  return $form;
}

/**
 * Helper function to return all published groups (array of nids=>titles)
 */
function _vojo_get_public_groups(){
  $ids = array();
  $result = db_query('SELECT n.nid as nid, n.title as title FROM {node} n WHERE n.type = "%s" and n.status = %d', 'group', 1);
  while ($info = db_fetch_array($result)) {
    $ids[$info['nid']] = $info['title'];
  }
  return $ids;
}

/**
 * Implementation of hook_nodeapi().
 * Modify nodes appropriately based on the settings.
 */
function vojo_og_nodeapi(&$node, $op, $a3=null, $a4=null) {
  // strip non-numeric chars from direct phone line before save 
  // (so the VoipScript to lookup direct phone numbers works)
  if($node->type=='group'){
    switch($op){
    case "presave":
      if($node->field_direct_phone_number[0]['phone']!=null){
        $node->field_direct_phone_number[0]['phone'] = preg_replace('/[^\d]*/','', $node->field_direct_phone_number[0]['phone']);
      }
      break;
    }
  }
}